/*
 * This file is part of Safester.                                    
 * Copyright (C) 2019, KawanSoft SAS
 * (https://www.Safester.net). All rights reserved.                                
 *                                                                               
 * Safester is free software; you can redistribute it and/or                 
 * modify it under the terms of the GNU Lesser General Public                    
 * License as published by the Free Software Foundation; either                  
 * version 2.1 of the License, or (at your option) any later version.            
 *                                                                               
 * Safester is distributed in the hope that it will be useful,               
 * but WITHOUT ANY WARRANTY; without even the implied warranty of                
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU             
 * Lesser General Public License for more details.                               
 *                                                                               
 * You should have received a copy of the GNU Lesser General Public              
 * License along with this library; if not, write to the Free Software           
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  
 * 02110-1301  USA
 * 
 * Any modifications to this file must keep this entire header
 * intact.
 */
package net.safester.clientserver.test;

import java.io.File;
import java.sql.Connection;
import java.util.List;
import java.util.Vector;

import javax.swing.UIManager;

import net.safester.application.parms.ConnectionParms;
import net.safester.application.util.JOptionPaneNewCustom;
import net.safester.clientserver.AttachmentListTransfer;
import net.safester.noobs.clientserver.AttachmentLocal;
import net.safester.noobs.clientserver.MessageLocal;

import com.safelogic.utilx.Debug;


        
public class AttachmentListTransferTest extends javax.swing.JFrame {

    /** Creates new form AttachmentListTransferTest */
    public AttachmentListTransferTest() {
        initComponents();
    }

    private void testIt()
    {
        File tempDir = new File("c:\\temp\\");

        File[] FILE_TEST = tempDir.listFiles();
        List<AttachmentLocal> attachments = new Vector<AttachmentLocal>();
        try
        {
            for(int i = 0; i< FILE_TEST.length; i++)
            {
                AttachmentLocal attachmentLocal = new AttachmentLocal();
                addText("Adding " + FILE_TEST[i].toString() );
                attachmentLocal.setAttachPosition(i);
                attachmentLocal.setFileName(FILE_TEST[i].toString());
                attachments.add(attachmentLocal);
            }
            addText("Opening AttachmentListTransfer");
            Connection connection;
            ConnectionParms connectionParms = new ConnectionParms("nico@safelogic.com", "passphrase".toCharArray(), null, null);
            try
            {
                connection = connectionParms.getConnection();
            }
            catch(Exception e)
            {
            	e.printStackTrace();
                JOptionPaneNewCustom.showException(this, e);
                return;
            }
            MessageLocal messageLocal = new MessageLocal();
            
            AttachmentListTransfer attachmentListTransfer = new AttachmentListTransfer(messageLocal, connection, this, false);
            
            addText("Transfering files");
            attachmentListTransfer.putList(attachments);
        }
        catch(Exception e)
        {
            addText(Debug.GetStackTrace(e));
        }
    }


    public void addText(String str)
    {
        str += System.getProperty("line.separator");
        this.jTextPane1.setText(this.jTextPane1.getText()+ str);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        jButtonOk = new javax.swing.JButton();
        jButtonQuit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jScrollPane1.setViewportView(jTextPane1);

        jPanel1.add(jScrollPane1);

        getContentPane().add(jPanel1);

        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 50));
        jPanel2.setPreferredSize(new java.awt.Dimension(112, 33));

        jButtonOk.setText("Launch Test");
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonOk);

        jButtonQuit.setText("Exit Test");
        jButtonQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuitActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonQuit);

        getContentPane().add(jPanel2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButtonQuitActionPerformed

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        testIt();
    }//GEN-LAST:event_jButtonOkActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {

                        try {
		UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (Exception ex) {
            System.out.println("Failed loading L&F: ");
            System.out.println(ex);
	}
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AttachmentListTransferTest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonOk;
    private javax.swing.JButton jButtonQuit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

}
